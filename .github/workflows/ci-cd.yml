name: CI/CD Pipeline

permissions:
  actions: write
  
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Terraform
        run: |
          sudo apt-get update && sudo apt-get install -y unzip
          curl -LO https://releases.hashicorp.com/terraform/1.6.0/terraform_1.6.0_linux_amd64.zip
          unzip terraform_1.6.0_linux_amd64.zip
          sudo mv terraform /usr/local/bin/

      - name: Initialize Terraform
        run: terraform init

      - name: Apply Terraform Configuration
        id: terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          terraform apply -auto-approve \
            -var="aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -var="aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"

      - name: Get EC2 Public IP
        id: get_ip
        run: |
          IP=$(terraform output -raw ec2_public_ip)
          echo "EC2_PUBLIC_IP=$IP" >> $GITHUB_ENV

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Update GitHub Secret via API
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          SECRET_NAME: EC2_PUBLIC_IP
        run: |
          # Baixar a chave pública do GitHub Actions
          PUB_KEY_DATA=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" https://api.github.com/repos/$REPO/actions/secrets/public-key)

          # Exibir a resposta completa da API para diagnóstico
          echo "PUB_KEY_DATA: $PUB_KEY_DATA"

          # Extrair a chave pública e o key_id
          PUB_KEY=$(echo "$PUB_KEY_DATA" | jq -r .key)
          KEY_ID=$(echo "$PUB_KEY_DATA" | jq -r .key_id)

          # Verificar se a chave pública foi extraída corretamente
          if [ "$PUB_KEY" == "null" ]; then
            echo "Erro: Chave pública não encontrada na resposta da API"
            exit 1
          fi

          # Exibir a chave pública para verificação
          echo "Public Key: $PUB_KEY"
          
          # Adicionar os cabeçalhos necessários para o formato PEM
          echo "-----BEGIN PUBLIC KEY-----" > public_key.pem
          echo "$PUB_KEY" >> public_key.pem
          echo "-----END PUBLIC KEY-----" >> public_key.pem

          # Verificar se o arquivo da chave pública foi criado corretamente
          cat public_key.pem
          
          # Criptografar o valor com a chave pública
          ENCRYPTED_VALUE=$(echo -n "${{ env.EC2_PUBLIC_IP }}" | openssl pkeyutl -encrypt -pubin -inkey public_key.pem)

          # Converter a saída binária para base64
          ENCRYPTED_VALUE_BASE64=$(echo "$ENCRYPTED_VALUE" | base64)

          # Atualizar o segredo do GitHub via API
          curl -X PUT \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/$REPO/actions/secrets/$SECRET_NAME \
            -d "{\"encrypted_value\": \"$ENCRYPTED_VALUE_BASE64\", \"key_id\": \"$KEY_ID\"}"
          
          # Limpar o arquivo temporário
          rm -f public_key.pem

  build:
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Unit Tests
        run: pytest tests/unit

      - name: Build Docker Image
        run: docker build -t techshop/app:${{ github.sha }} .

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Deploy to AWS EC2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
            "docker pull techshop/app:${{ github.sha }} && docker run -d -p 80:80 techshop/app:${{ github.sha }}"
